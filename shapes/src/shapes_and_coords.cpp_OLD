#include <cstdlib>
#include <string>
#include "rbDNA.hpp"
#include "rbDNAutils.hpp"
#include "rbDNAparamset.hpp"
#include "DNA_IO.hpp"

std::string expand_sequence (const std::string& str)
{
    return str;
}

int main (int argc, char** argv)
{
    if (argc < 2) {
        std::cout << "{ \"Error\" : \"not enough arguments\"}" << std::endl;
        exit(1);
    }

    std::string paramdir = "PARAMDIR";
    std::string env;
    if (!std::getenv(paramdir.c_str()))
        env = ".";
    else
        env = std::getenv(paramdir.c_str());

    std::string input = argv[1];
    std::string sequence = expand_sequence(input);

    DNA_IO io;
    auto p = io.read_paramset(env+"/data/cgDNAparamset2.txt");

    arma::mat K = utils::make_K(sequence, p);
    arma::vec w = utils::make_w(sequence, p, K);

    auto dna = utils::construct_configuration(sequence, w);

    //Output:
    std::cout << "{\n";
    std::cout << "\t\"error\" : \"None\",\n";
    std::cout << "\t\"sequence\" : \"" << dna.sequence() << "\",\n";
    std::cout << "\t\"shapes\" : [\n";
    for (int i = 0; i < w.size(); ++i) {
        std::cout << "\t\t" << w.at(i);
        if (i != w.size()-1)
            std::cout << ',' << std::endl;
        else
            std::cout << std::endl;
    }
    std::cout << "\t],\n";
    std::cout << "\t\"coords\" : [\n";
    for (int i = 0; i < dna.size(); ++i) {
        std::cout << "\t\t{\n";
        // D
        std::cout << "\t\t\t\"D\" : [\n";
        std::cout << "\t\t\t\t" << dna.R(i)(0,0) << ",\t" << dna.R(i)(0,1) << ",\t" << dna.R(i)(0,2) << ",\n";
        std::cout << "\t\t\t\t" << dna.R(i)(1,0) << ",\t" << dna.R(i)(1,1) << ",\t" << dna.R(i)(1,2) << ",\n";
        std::cout << "\t\t\t\t" << dna.R(i)(2,0) << ",\t" << dna.R(i)(2,1) << ",\t" << dna.R(i)(2,2) << "\n";
        std::cout << "\t\t\t],\n";
        // Dc
        std::cout << "\t\t\t\"Dc\" : [\n";
        std::cout << "\t\t\t\t" << dna.Rc(i)(0,0) << ",\t" << dna.Rc(i)(0,1) << ",\t" << dna.Rc(i)(0,2) << ",\n";
        std::cout << "\t\t\t\t" << dna.Rc(i)(1,0) << ",\t" << dna.Rc(i)(1,1) << ",\t" << dna.Rc(i)(1,2) << ",\n";
        std::cout << "\t\t\t\t" << dna.Rc(i)(2,0) << ",\t" << dna.Rc(i)(2,1) << ",\t" << dna.Rc(i)(2,2) << "\n";
        std::cout << "\t\t\t],\n";
        // r
        std::cout << "\t\t\t\"r\" : [\n";
        std::cout << "\t\t\t\t" << dna.r(i)(0) << ",\t" << dna.r(i)(1) << ",\t" << dna.r(i)(2) << "\n";
        std::cout << "\t\t\t],\n";
        // rc
        std::cout << "\t\t\t\"rc\" : [\n";
        std::cout << "\t\t\t\t" << dna.rc(i)(0) << ",\t" << dna.rc(i)(1) << ",\t" << dna.rc(i)(2) << "\n";
        std::cout << "\t\t\t]\n";
        // end
        if (i != dna.size()-1)
            std::cout << "\t\t},\n";
        else
            std::cout << "\t\t}\n";
    }
    std::cout << "\t]\n";
    std::cout << "}\n";

    return 0;
}

