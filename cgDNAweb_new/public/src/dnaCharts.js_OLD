const Chart = require("./d3chart.js").Chart

function dnaCharts () {
    //intras
    this.buckle = undefined;
    this.propeller = undefined;
    this.opening = undefined;
    this.shear = undefined;
    this.stretch = undefined;
    this.stagger = undefined;

    //inters
    this.tilt = undefined;
    this.roll = undefined;
    this.twist = undefined;
    this.shift = undefined;
    this.slide = undefined;
    this.rise = undefined;

    //phosphate_watson
    this.phos_w_eta1 = undefined;
    this.phos_w_eta2 = undefined;
    this.phos_w_eta3 = undefined;
    this.phos_w_w1 = undefined;
    this.phos_w_w2 = undefined;
    this.phos_w_w3 = undefined;

    //phosphate_crick
    this.phos_c_eta1 = undefined;
    this.phos_c_eta2 = undefined;
    this.phos_c_eta3 = undefined;
    this.phos_c_w1 = undefined;
    this.phos_c_w2 = undefined;
    this.phos_c_w3 = undefined;

    //sequences
    this.sequences = [undefined, undefined, undefined, undefined, undefined];
    this.types = [undefined, undefined, undefined, undefined, undefined]; //cgDNA or cgDNA+

    //options
    this.coords = 'curves'; //or 'cgDNA'
};

dnaCharts.prototype = {
    init : function () {
        let width = 500;
        let height = 300;

        //================================================================================
        // Intras
        //================================================================================

        this.buckle = new Chart(width, height, 'deg', 'monomer');
        this.buckle.init('#buckle');
        this.buckle.setYLabel('buckle (degrees)');

        this.propeller = new Chart(width, height, 'deg', 'monomer');
        this.propeller.init('#propeller');
        this.propeller.setYLabel('propeller (degrees)');

        this.opening = new Chart(width, height, 'deg', 'monomer');
        this.opening.init('#opening');
        this.opening.setYLabel('opening (degrees)');

        this.shear = new Chart(width, height, '\u212B', 'monomer');
        this.shear.init('#shear');
        this.shear.setYLabel('shear (\u212B)');

        this.stretch = new Chart(width, height, '\u212B', 'monomer');
        this.stretch.init('#stretch');
        this.stretch.setYLabel('stretch (\u212B)');

        this.stagger = new Chart(width, height, '\u212B', 'monomer');
        this.stagger.init('#stagger');
        this.stagger.setYLabel('stagger (\u212B)');

        //================================================================================
        // Inters
        //================================================================================

        this.tilt = new Chart(width, height, 'deg', 'dimer');
        this.tilt.init('#tilt');
        this.tilt.setYLabel('tilt (degrees)');
        this.tilt.setXLabel('basepair step');
        this.tilt.setType('dimer');

        this.roll = new Chart(width, height, 'deg', 'dimer');
        this.roll.init('#roll');
        this.roll.setYLabel('roll (degrees)');
        this.roll.setXLabel('basepair step');
        this.roll.setType('dimer');

        this.twist = new Chart(width, height, 'deg', 'dimer');
        this.twist.init('#twist');
        this.twist.setYLabel('twist (degrees)');
        this.twist.setXLabel('basepair step');
        this.twist.setType('dimer');

        this.shift = new Chart(width, height, '\u212B', 'dimer');
        this.shift.init('#shift');
        this.shift.setYLabel('shift (\u212B)');
        this.shift.setXLabel('basepair step');
        this.shift.setType('dimer');

        this.slide = new Chart(width, height, '\u212B', 'dimer');
        this.slide.init('#slide');
        this.slide.setYLabel('slide (\u212B)');
        this.slide.setXLabel('basepair step');
        this.slide.setType('dimer');

        this.rise = new Chart(width, height, '\u212B', 'dimer');
        this.rise.init('#rise');
        this.rise.setYLabel('rise (\u212B)');
        this.rise.setXLabel('basepair step');
        this.rise.setType('dimer');

        //================================================================================
        // Phosphates
        //================================================================================
        //watson
        this.phos_w_eta1 = new Chart(width, height, 'deg', 'monomer');
        this.phos_w_eta1.init('#phos_w_eta1');
        this.phos_w_eta1.setYLabel('\u03B7_1 (degrees)');

        this.phos_w_eta2 = new Chart(width, height, 'deg', 'monomer');
        this.phos_w_eta2.init('#phos_w_eta2');
        this.phos_w_eta2.setYLabel('\u03B7_2 (degrees)');

        this.phos_w_eta3 = new Chart(width, height, 'deg', 'monomer');
        this.phos_w_eta3.init('#phos_w_eta3');
        this.phos_w_eta3.setYLabel('\u03B7_3 (degrees)');

        this.phos_w_w1 = new Chart(width, height, '\u212B', 'monomer');
        this.phos_w_w1.init('#phos_w_w1');
        this.phos_w_w1.setYLabel('w1 (\u212B)');

        this.phos_w_w2 = new Chart(width, height, '\u212B', 'monomer');
        this.phos_w_w2.init('#phos_w_w2');
        this.phos_w_w2.setYLabel('w2 (\u212B)');

        this.phos_w_w3 = new Chart(width, height, '\u212B', 'monomer');
        this.phos_w_w3.init('#phos_w_w3');
        this.phos_w_w3.setYLabel('w3 (\u212B)');

        //crick
        this.phos_c_eta1 = new Chart(width, height, 'deg', 'monomer');
        this.phos_c_eta1.init('#phos_c_eta1');
        this.phos_c_eta1.setYLabel('\u03B7_1 (degrees)');

        this.phos_c_eta2 = new Chart(width, height, 'deg', 'monomer');
        this.phos_c_eta2.init('#phos_c_eta2');
        this.phos_c_eta2.setYLabel('\u03B7_2 (degrees)');

        this.phos_c_eta3 = new Chart(width, height, 'deg', 'monomer');
        this.phos_c_eta3.init('#phos_c_eta3');
        this.phos_c_eta3.setYLabel('\u03B7_3 (degrees)');

        this.phos_c_w1 = new Chart(width, height, '\u212B', 'monomer');
        this.phos_c_w1.init('#phos_c_w1');
        this.phos_c_w1.setYLabel('w1 (\u212B)');

        this.phos_c_w2 = new Chart(width, height, '\u212B', 'monomer');
        this.phos_c_w2.init('#phos_c_w2');
        this.phos_c_w2.setYLabel('w2 (\u212B)');

        this.phos_c_w3 = new Chart(width, height, '\u212B', 'monomer');
        this.phos_c_w3.init('#phos_c_w3');
        this.phos_c_w3.setYLabel('w3 (\u212B)');
    },

    addData : function (DNA_id, seq, data, type) {
        //add the sequence
        this.sequences[DNA_id-1] = seq;
        this.types[DNA_id-1] = type;

        //split all data:
	    let buckle_curves = [];
	    let propeller_curves = [];
	    let opening_curves = [];

	    let tilt_curves = [];
	    let roll_curves = [];
	    let twist_curves = [];

        var [
            buckle, propeller, opening,
            shear, stretch, stagger,
            tilt, roll, twist,
            shift, slide, rise
        ] = this.splitcgDNAdata(data);

        if (type === "cgDNA+") {
            var [
                buckle, propeller, opening,
                shear, stretch, stagger,
                tilt, roll, twist,
                shift, slide, rise,
                phos_w_eta1, phos_w_eta2, phos_w_eta3,
                phos_w_w1, phos_w_w2, phos_w_w3,
                phos_c_eta1, phos_c_eta2, phos_c_eta3,
                phos_c_w1, phos_c_w2, phos_c_w3,
            ] = this.splitcgDNAplusdata(data);

        }
	    //Calculate curves+ rotational coordinates:
	    const length_intras = buckle.length;
	    for (let i = 0; i < length_intras; i++) {
	        buckle_curves.push(0.1*buckle[i]);
	        propeller_curves.push(0.1*propeller[i]);
	        opening_curves.push(0.1*opening[i]);
	    }
	    let ncay_intras = [];
	    for (let i = 0; i < length_intras; i++) {
	        const sum = Math.pow(buckle_curves[i],2)
                        + Math.pow(propeller_curves[i],2)
                        + Math.pow(opening_curves[i],2);
                ncay_intras.push(Math.sqrt(sum));
	    }
	    let angle_intras = [];
	    for (let i = 0; i < length_intras; i++) {
                angle_intras.push(2.0*Math.atan(ncay_intras[i])*180.0/Math.PI);
	    }
	    for (let i = 0; i < length_intras; i++) {
	        buckle_curves[i]    *= angle_intras[i]/ncay_intras[i];
	        propeller_curves[i] *= angle_intras[i]/ncay_intras[i];
	        opening_curves[i]   *= angle_intras[i]/ncay_intras[i];
	    }
	    const length_inters = tilt.length;
	    for (let i = 0; i < length_inters; i++) {
	        tilt_curves.push(0.1*tilt[i]);
	        roll_curves.push(0.1*roll[i]);
	        twist_curves.push(0.1*twist[i]);
	    }
	    let ncay_inters = [];
	    for (let i = 0; i < length_inters; i++) {
	        const sum = Math.pow(tilt_curves[i],2)
                        + Math.pow(roll_curves[i],2)
                        + Math.pow(twist_curves[i],2);
                ncay_inters.push(Math.sqrt(sum));
	    }
	    let angle_inters = [];
	    for (let i = 0; i < length_inters; i++) {
                angle_inters.push(2.0*Math.atan(ncay_inters[i])*180.0/Math.PI);
	    }
	    for (let i = 0; i < length_inters; i++) {
	        tilt_curves[i] *= angle_inters[i]/ncay_inters[i];
	        roll_curves[i] *= angle_inters[i]/ncay_inters[i];
	        twist_curves[i]*= angle_inters[i]/ncay_inters[i];
	    }


        this.buckle.addData(   DNA_id, seq, buckle,    buckle_curves,    this.coords);
        this.propeller.addData(DNA_id, seq, propeller, propeller_curves, this.coords);
        this.opening.addData(  DNA_id, seq, opening,   opening_curves,   this.coords);
        this.shear.addData(    DNA_id, seq, shear,     shear,   this.coords);
        this.stretch.addData(  DNA_id, seq, stretch,   stretch, this.coords);
        this.stagger.addData(  DNA_id, seq, stagger,   stagger, this.coords);

        this.tilt.addData( DNA_id, seq, tilt,  tilt_curves,  this.coords);
        this.roll.addData( DNA_id, seq, roll,  roll_curves,  this.coords);
        this.twist.addData(DNA_id, seq, twist, twist_curves, this.coords);
        this.shift.addData(DNA_id, seq, shift, shift, this.coords);
        this.slide.addData(DNA_id, seq, slide, slide, this.coords);
        this.rise.addData( DNA_id, seq, rise,  rise,  this.coords);
    },

    splitcgDNAdata : function (data) {
        let buckle = [];
        let propeller = [];
        let opening = [];
        let shear = [];
        let stretch = [];
        let stagger = [];

        let tilt = [];
        let roll = [];
        let twist = [];
        let shift = [];
        let slide = [];
        let rise = [];


        for (let i = 0; i < data.length-12; i+=12) {
            let coords = data.slice(i, i+12);
            buckle.push(   coords[0]);
            propeller.push(coords[1]);
            opening.push(  coords[2]);
            shear.push(    coords[3]);
            stretch.push(  coords[4]);
            stagger.push(  coords[5]);

            tilt.push( coords[6]);
            roll.push( coords[7]);
            twist.push(coords[8]);
            shift.push(coords[9]);
            slide.push(coords[10]);
            rise.push( coords[11]);
        }
        buckle.push(data[data.length-6]);
        propeller.push(data[data.length-5]);
        opening.push(data[data.length-4]);
        shear.push(data[data.length-3]);
        stretch.push(data[data.length-2]);
        stagger.push(data[data.length-1]);

        return [buckle, propeller, opening, shear, stretch, stagger, tilt, roll, twist, shift, slide, rise];
    },

    splitcgDNAplusdata : function (data) {
        let buckle = [];
        let propeller = [];
        let opening = [];
        let shear = [];
        let stretch = [];
        let stagger = [];

        let tilt = [];
        let roll = [];
        let twist = [];
        let shift = [];
        let slide = [];
        let rise = [];

        let phos_w_eta1 = [];
        let phos_w_eta2 = [];
        let phos_w_eta3 = [];
        let phos_w_w1 = [];
        let phos_w_w2 = [];
        let phos_w_w3 = [];

        let phos_c_eta1 = [];
        let phos_c_eta2 = [];
        let phos_c_eta3 = [];
        let phos_c_w1 = [];
        let phos_c_w2 = [];
        let phos_c_w3 = [];

        for (let i = 0; i < data.length-18; i+=24) {
            let coords = data.slice(i, i+24);

            phos_w_eta1.push(coords[0]);
            phos_w_eta2.push(coords[1]);
            phos_w_eta3.push(coords[2]);
            phos_w_w1.push(coords[3]);
            phos_w_w2.push(coords[4]);
            phos_w_w3.push(coords[5]);

            buckle.push(   coords[6]);
            propeller.push(coords[7]);
            opening.push(  coords[8]);
            shear.push(  coords[9]);
            stretch.push(coords[10]);
            stagger.push(coords[11]);

            phos_c_eta1.push(coords[12]);
            phos_c_eta2.push(coords[13]);
            phos_c_eta3.push(coords[14]);
            phos_c_w1.push(coords[15]);
            phos_c_w2.push(coords[16]);
            phos_c_w3.push(coords[17]);

            tilt.push( coords[18]);
            roll.push( coords[19]);
            twist.push(coords[20]);
            shift.push(coords[21]);
            slide.push(coords[22]);
            rise.push( coords[23]);
        }
        phos_w_eta1.push(data[data.length-18]);
        phos_w_eta2.push(data[data.length-17]);
        phos_w_eta3.push(data[data.length-16]);
        phos_w_w1.push(data[data.length-15]);
        phos_w_w2.push(data[data.length-14]);
        phos_w_w3.push(data[data.length-13]);

        buckle.push(   data[data.length-12]);
        propeller.push(data[data.length-11]);
        opening.push(  data[data.length-10]);
        shear.push(  data[data.length-9]);
        stretch.push(data[data.length-8]);
        stagger.push(data[data.length-7]);

        phos_c_eta1.push(data[data.length-6]);
        phos_c_eta2.push(data[data.length-5]);
        phos_c_eta3.push(data[data.length-4]);
        phos_c_w1.push(data[data.length-3]);
        phos_c_w2.push(data[data.length-2]);
        phos_c_w3.push(data[data.length-1]);

        return [
            buckle, propeller, opening,
            shear, stretch, stagger,
            tilt, roll, twist,
            shift, slide, rise,
            phos_w_eta1, phos_w_eta2, phos_w_eta3,
            phos_w_w1, phos_w_w2, phos_w_w3,
            phos_c_eta1, phos_c_eta2, phos_c_eta3,
            phos_c_w1, phos_c_w2, phos_c_w3,
        ];
    },

    removeData : function (DNA_id) {
        this.sequences[DNA_id-1] = undefined;
        this.buckle.removeData(DNA_id);
        this.propeller.removeData(DNA_id);
        this.opening.removeData(DNA_id);
        this.shear.removeData(DNA_id);
        this.stretch.removeData(DNA_id);
        this.stagger.removeData(DNA_id);

        this.tilt.removeData(DNA_id);
        this.roll.removeData(DNA_id);
        this.twist.removeData(DNA_id);
        this.shift.removeData(DNA_id);
        this.slide.removeData(DNA_id);
        this.rise.removeData(DNA_id);

        if (this.types[DNA_id-1] === "cgDNA+") {
            phos_w_eta1.removeData(DNA_id);
            phos_w_eta2.removeData(DNA_id);
            phos_w_eta3.removeData(DNA_id);
            phos_w_w1.removeData(DNA_id);
            phos_w_w2.removeData(DNA_id);
            phos_w_w3.removeData(DNA_id);

            phos_c_eta1.removeData(DNA_id);
            phos_c_eta2.removeData(DNA_id);
            phos_c_eta3.removeData(DNA_id);
            phos_c_w1.removeData(DNA_id);
            phos_c_w2.removeData(DNA_id);
            phos_c_w3.removeData(DNA_id);
        }

        this.types[DNA_id-1] = undefined;
    },

    //TODO make compatible with cgDNA+
    changeCoords : function (type) {
        console.log("in changeCoords");
        console.log("type:",type);
        console.log("this.coords:",this.coords);
        if (type === 'cgDNA' && this.coords === 'curves') {
            this.coords = type;

            this.buckle.setYLabel('buckle (rad/5)');
            this.buckle.changeCoordType(type);

            this.propeller.setYLabel('propeller (rad/5)');
            this.propeller.changeCoordType(type);

            this.opening.setYLabel('opening (rad/5)');
            this.opening.changeCoordType(type);

            this.shear.setYLabel('shear (\u212B)');
            this.shear.changeCoordType(type);

            this.stretch.setYLabel('stretch (\u212B)');

            this.stagger.setYLabel('stagger (\u212B)');

            this.tilt.setYLabel('tilt (rad/5)');
            this.tilt.changeCoordType(type);

            this.roll.setYLabel('roll (rad/5)');
            this.roll.changeCoordType(type);

            this.twist.setYLabel('twist (rad/5)');
            this.twist.changeCoordType(type);

            this.shift.setYLabel('shift (\u212B)');

            this.slide.setYLabel('slide (\u212B)');

            this.rise.setYLabel('rise (\u212B)');
        } else if (type === 'curves' && this.coords === 'cgDNA') {
            this.coords = type;

            this.buckle.setYLabel('buckle (degrees)');
            this.buckle.changeCoordType(type);

            this.propeller.setYLabel('propeller (degrees)');
            this.propeller.changeCoordType(type);

            this.opening.setYLabel('opening (degrees)');
            this.opening.changeCoordType(type);

            this.shear.setYLabel('shear (\u212B)');

            this.stretch.setYLabel('stretch (\u212B)');

            this.stagger.setYLabel('stagger (\u212B)');

            this.tilt.setYLabel('tilt (degrees)');
            this.tilt.changeCoordType(type);

            this.roll.setYLabel('roll (degrees)');
            this.roll.changeCoordType(type);

            this.twist.setYLabel('twist (degrees)');
            this.twist.changeCoordType(type);

            this.shift.setYLabel('shift (\u212B)');

            this.slide.setYLabel('slide (\u212B)');

            this.rise.setYLabel('rise (\u212B)');
        }
    }

};

exports.dnaCharts = dnaCharts;
